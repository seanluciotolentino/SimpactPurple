Cluster Extensions
=========================================

While the original parallel algorithm is able to quickly simulate large population sizes, it is apparent that there is a limit to how large a population it can handle. This limit is evident from the following points: The first is that an individual living in large urban area isn't equally likely to form relationships with ever other individuals -- individuals that are farther away are less likely to come in contact and thus less likely to form a relationship.

The second is that memory of an individual computer is limited and cannot reasonably hold millions of individuals at once. For these reasons we developed SimpactPurple further so that multiple communities can be run in parallel and explicitly consider geographic distance.  Below is a description of the over all idea, the implementation, and additional information on how to run the simulation on a cluster.

The Big Idea
----------------------------------------

Similar to our desire for it to be possible for age-disparate relationships to form, we also want geographically disparate relationships to be able to form, but simply be less likely. So in this way we make geographic community an attribute of our grid queue which partitions individuals in the simulation. 

The idea is that there is one main queue living on a single node, and the grids of queues which serve it live on other nodes. Each geographic community then has several grid servers (which communicate the needs of the grid queues) with which it can communicate about matches. The figures below attempt to explain this visually.

.. image:: images/cluster1.jpg

Each community (Ames, Coralville/Iowa City, and Davenport) has it's own main queue to build it's own sexual network data structure. Since Coralville and Iowa City are so near each other, there needs to be a grid of queues which serves a single sexual network. However, since an individual is more likely to form a relationship with someone from Iowa City and less likely to form a relationship with someone from Coralville, their hazard for matches from these grid queues will be altered accordingly (reduced by half for matches from Corallville, reduced by 0.8 for matches from Iowa City). 

.. image:: images/cluster2.jpg

Each main queue keeps a list of grid queues that serve that Community. Akin to the original algorithm, when a suitor wants to make a match, a signal is sent out to serving grid queues. The difference now is that some of these grid queues live on a different node.

Implementation
---------------------------------------

In order to run several communities in parallel, some additional infrastructure needed to be added. First is the MainAlt.py script which is run with mpiexec (explored more below). The script listens for communication from the Global object and sets up simulation features.  Second the Global_ object keeps all parallel communities in sync. It does this by sending a "step" signal to each community, and then waiting for a "done" signal response. Additionally it sends the initial roles which each node shall fulfull: nodes which host main queues and store the sexual network are given the role of "Community", nodes which hold grid queues are given the role of "grid server". 

A CommunityAlt_ object is nearly the same as a regular Community except for a few subtle points. First it waits to perform a step operation until receiving a "step" signal from the Global object. Second it adds the  relationship operator specifically meant for cluster computing. And third adds a location to each agent that is added. 

The special relationship operator is also nearly identical. However instead of initializing processes for grid queues soley on the processor it is working on, it also initializes processes for grid queues on other nodes.  Similar to the previous implementation a pipe is set up to communicate with the grid queue, the difference is that this pipe forwards requests via MPI to the grid queue on another node. A subtle, but significant difference, is the change to how agents are assigned to grid queues -- the "update_grid_queue_for" method has been change to reflect that agents additionally should be placed in grid queues relative to their geographic location.

.. _Global: clusterclasses.html
.. _CommunityAlt: clusterclasses.html


Deployment
---------------------------------------

In order to run on a cluster, mpi4py (http://mpi4py.scipy.org/) needs to be installed on the cluster or server.  Currently the variables for running a simulation on a cluster is hardcoded into GlobalAlt.py.  To run the simulation (which is 4 communities serviced by two grid servers) in parallel on a single node of the cluster run the following at the command prompt of the worker node::

	mpiexec -n 5 python MainAlt.py
	
This starts 5 processes, 4 of which handle actions for a CommunityAlt object, and 1 which handles organization of the communities through the GlobalMPI object. To run on a cluster of nodes (not just a single worker), run the following::

	mpiexec -n 5 -host v1,v2,v3,v4 python MainAlt.py

Where v1, v2, v3, v4 are worker nodes where processes can be initiated. Note that you'll need to be able to log into (ssh into) these nodes without a password to work correctly.

